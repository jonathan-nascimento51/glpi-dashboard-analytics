# GLPI Dashboard Analytics - Production Docker Compose
# Configuração otimizada para ambiente de produção

version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: glpi-dashboard-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-glpi_dashboard_redis}
    volumes:
      - redis_data:/data
    networks:
      - glpi-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: glpi-dashboard-backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - GLPI_API_URL=${GLPI_API_URL}
      - GLPI_APP_TOKEN=${GLPI_APP_TOKEN}
      - GLPI_USER_TOKEN=${GLPI_USER_TOKEN}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-glpi_dashboard_redis}@redis:6379/0
      - CACHE_TTL=${CACHE_TTL:-300}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - glpi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/dashboard/system-status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: glpi-dashboard-frontend
    restart: unless-stopped
    networks:
      - glpi-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: glpi-dashboard-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - glpi-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Log aggregator (opcional)
  # logrotate:
  #   image: linkyard/docker-logrotate
  #   container_name: glpi-dashboard-logrotate
  #   restart: unless-stopped
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./logrotate.conf:/etc/logrotate.conf:ro

volumes:
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  glpi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16